const wchar_t dot_expected[] = L"'.' expected.";
const wchar_t sep_expected[] = L"Term or ':-' or '.' expected.";
const wchar_t unmatched_quotes[] = L"Unmatched \"";
const wchar_t err_inrel[] = L"Unable to read the input relation symbol.";
const wchar_t err_src[] = L"Unable to read src file.";
const wchar_t err_dst[] = L"Unable to read dst file.";
const wchar_t err_quotes[] = L"Expected \".";
const wchar_t err_dots[] = L"Two consecutive dots, or dot in beginning of document.";
const wchar_t err_quote[] = L"' should come before and after a single character only.";
const wchar_t err_fname[] = L"Malformed filename.";
const wchar_t err_directive_arg[] = L"Invalid directive argument.";
const wchar_t err_escape[] = L"Invalid escaped character";
const wchar_t err_int[] = L"Malformed int.";
const wchar_t err_lex[] = L"Lexer error (please report as a bug).";
const wchar_t err_parse[] = L"Parser error (please report as a bug).";
const wchar_t err_chr[] = L"Unexpected character.";
const wchar_t err_body[] = L"Rule's body expected.";
const wchar_t err_prod[] = L"Production's body expected.";
const wchar_t err_empty_prod[] = L"Empty production.";
const wchar_t err_start_sym[] = L"Expected a term to be fed to the start symbol.";
const wchar_t err_term_or_dot[] = L"Term or dot expected.";
const wchar_t err_close_curly[] = L"'}' expected.";
const wchar_t err_fnf[] = L"File not found.";
const wchar_t err_rule_dir_prod_expected[] = L"Rule or production or directive expected.";
const wchar_t err_paren[] = L"Unbalanced parenthesis.";
const wchar_t err_relsym_expected[] = L"Expected relation name in beginning of term.";
const wchar_t err_paren_expected[] = L"Expected parenthesis after a nonzero arity relation symbol.";
const wchar_t err_head[] = L"Expected dot or comma or update operator.";
const wchar_t err_digit[] = L"Symbol name cannot begin with a digit.";
const wchar_t err_var_relsym[] = L"Relation symbol cannot be a variable.";
const wchar_t err_proof[] = L"Proof extraction yet unsupported for programs with negation or deletion.";
const wchar_t err_directive_elem[] = L"Universe element in directive not appearing in program.";
const wchar_t err_goalsym[] = L"Goal symbol not appearing in program.";
const wchar_t err_goalarity[] = L"Goal arity larger than the program's.";
const wchar_t err_num_cmdline[] = L"Program expects more command line arguments.";
const wchar_t err_one_input[] = L"Only one input string allowed given grammar.";
const wchar_t err_str_defined[] = L"String already defined.";
const wchar_t warning_empty_domain[] = L"Warning: empty domain, adding dummy element.";
const wchar_t err_trace_rel[] = L"Trace directive has to be followed by a relation symbol.";
const wchar_t err_directive[] = L"Directives can be @string or @stdout or @trace.";
const wchar_t err_stdout[] = L"Expected term after @stdout.";
const wchar_t err_rel_expected[] = L"Expected relation symbol.";
const wchar_t err_len[] = L"Taking the length of an unknown string.";
const wchar_t err_comment[] = L"Unfinished comment.";
const wchar_t err_eof[] = L"Unexpected end of file.";
const wchar_t err_eq_expected[] = L"Expected =/!= in the middle of term.";
const wchar_t err_leq_expected[] = L"Expected <=/> in the middle of term.";
const wchar_t err_3_els_expected[] = L"Expected 3 elements in the term.";
const wchar_t err_builtin_expected[] = L"Expected builtin name in the beginning of term.";
const wchar_t err_type[] = L"Type mismatch within the table/rule.";
const wchar_t wrn_bodydepends[] = L"(internal) Body tbl not in depends.";

